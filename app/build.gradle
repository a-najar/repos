plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}
// i use this to link the app version code by the commit count and the version name by the commit number
def gitSha = 'git rev-parse --short HEAD'.execute().text.trim()
def gitCommitCount = 100 + Integer.parseInt('git rev-list --count HEAD'.execute().text.trim())

android {
    compileSdkVersion compile_sdk_version
    defaultConfig {
        applicationId "com.trycarriage.test"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode gitCommitCount
        versionName gitSha
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SERVER_URL", APP_RELEASE_URL)
        }
        uat {
            debuggable true
            buildConfigField("String", "SERVER_URL", APP_UAT_URL)

        }
        debug {
            debuggable true
            buildConfigField("String", "SERVER_URL", APP_DEV_URL)

        }
    }

    // used to export room schema
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(
            "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
            "androidx.core:core-ktx:$android_ktx"
    )

    // android support
    implementation(
            "androidx.appcompat:appcompat:$app_compat_version",
            "androidx.constraintlayout:constraintlayout:$constraint_layout_version",
            "com.google.android.material:material:$material_design_version"
    )

    // room support
    implementation("androidx.room:room-runtime:$room_version",
            "androidx.room:room-rxjava2:$room_version"
    )
    kapt "androidx.room:room-compiler:$room_version"


    implementation(
            "com.mikepenz:fastadapter:$fast_adapter_version",
            "com.mikepenz:fastadapter-commons:$fast_adapter_version",
            "com.mikepenz:fastadapter-extensions:$fast_adapter_version"
    )

    // insert koin for decadency injection
    implementation(
            "org.koin:koin-android:$koin_version",
            "org.koin:koin-androidx-scope:$koin_version",
            "org.koin:koin-androidx-viewmodel:$koin_version")

    implementation(
            "io.reactivex.rxjava2:rxandroid:$rx_java_version",
            "io.reactivex.rxjava2:rxjava:$rx_android_version",
            "com.amitshekhar.android:rx2-android-networking:$rx_afn_networking"
    )

    // use logger
    implementation "com.jakewharton.timber:timber:$logger_version"

    testImplementation(
            "junit:junit:$junit_version",
            "androidx.room:room-testing:$room_version"
    )

    androidTestImplementation(
            "androidx.test:runner:$test_runner_version",
            "androidx.test.espresso:espresso-core:$espresso_version"
    )

}
